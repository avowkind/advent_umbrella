Compiling 1 file (.ex)
**parse_data: [
  {"R", 10, "#090220"},
  {"U", 4, "#61ce73"},
  {"R", 2, "#27ac30"},
  {"D", 4, "#6e7db3"},
  {"R", 9, "#42fb60"},
  {"U", 2, "#267e43"},
  {"R", 3, "#4a73a0"},
  {"U", 3, "#0da863"},
  {"L", 7, "#464882"},
  {"U", 3, "#667693"},
  {"L", 4, "#6ed2b2"},
  {"U", 8, "#1efed3"},
  {"L", 6, "#898ac2"},
  {"D", 8, "#596eb3"},
  {"L", 3, "#4a1fe2"},
  {"U", 4, "#1c92f3"},
  {"L", 4, "#42f8d0"},
  {"U", 3, "#5d3b13"},
  {"L", 6, "#2913d0"},
  {"U", 8, "#1941a3"},
  {"L", 6, "#401a90"},
  {"D", 9, "#1941a1"},
  {"L", 3, "#4f3ef0"},
  {"D", 2, "#53b9d3"},
  {"L", 3, "#0e2a00"},
  {"D", 4, "#201683"},
  {"L", 7, "#547ba0"},
  {"D", 4, "#662e23"},
  {"L", 9, "#814d30"},
  {"D", 2, "#662e21"},
  {"L", 6, "#0d69f0"},
  {"D", 8, "#201681"},
  {"R", 4, "#9da8d0"},
  {"D", 10, "#3bef23"},
  {"L", 4, "#235c92"},
  {"D", 12, "#385aa3"},
  {"L", 4, "#859100"},
  {"D", 2, "#7489f3"},
  {"L", 3, "#479820"},
  {"D", 9, "#23dbc3"},
  {"L", 5, "#3f40a2"},
  {"U", 9, "#345f23"},
  {"L", 5, "#054280"},
  {"U", 5, "#7cd843"},
  {"R", 5, "#054282"},
  {"U", 7, "#00d753"},
  {"R", 4, "#495402"},
  {"U", 5, ...},
  {"L", ...},
  {...},
  ...
]
build_graph: %{
  {61, 121} => "#4c3953",
  {-31, -58} => "#5874b0",
  {-9, -18} => "#201683",
  {-9, 132} => "#6e5463",
  {78, 139} => "#40a982",
  {103, 106} => "#3ccba3",
  {-27, 43} => "#2b6983",
  {-35, -71} => "#86c2f2",
  {-15, 0} => "#5d3b13",
  {-123, 50} => "#3f3b41",
  {-45, -5} => "#110871",
  {-2, -39} => "#0d69f0",
  {45, 217} => "#3503a1",
  {-51, 49} => "#600a93",
  {174, 171} => "#7bd493",
  {51, 228} => "#386590",
  {195, 200} => "#5f0761",
  {3, 202} => "#559e92",
  {-9, 186} => "#382a10",
  {-34, 49} => "#5619b3",
  {231, 218} => "#0a7bc2",
  {-8, -25} => "#547ba0",
  {12, 137} => "#01ea61",
  {-49, 124} => "#4a68e1",
  {183, 208} => "#0189f2",
  {68, 256} => "#52fe41",
  {-36, -41} => "#34bb23",
  {21, 35} => "#11a943",
  {-44, 119} => "#3487f1",
  {146, 182} => "#279590",
  {183, 187} => "#2fb9d3",
  {11, -52} => "#67f181",
  {-125, 50} => "#3f3b41",
  {42, 242} => "#06d723",
  {-21, 176} => "#27b292",
  {191, 165} => "#733be0",
  {43, 238} => "#1a5580",
  {-126, 50} => "#3f3b41",
  {168, 117} => "#0427c1",
  {-139, 131} => "#173ab1",
  {-59, -2} => "#26cbf2",
  {164, 176} => "#2cadb2",
  {186, 250} => "#20f980",
  {197, 151} => "#56d912",
  {-71, 133} => "#628210",
  {36, 229} => "#312983",
  {193, 137} => "#0e43f2",
  {-39, -63} => "#4b9c00",
  {-11, ...} => "#289052",
  {...} => "#1941a3",
  ...
}


  1) test run_data (Advent18Test)
     test/advent18_test.exs:26
     ** (FunctionClauseError) no function clause matching in anonymous fn/1 in Advent18.find_wall_indices/2

     The following arguments were given to anonymous fn/1 in Advent18.find_wall_indices/2:
     
         # 1
         [200]
     
     code: interior = graph |> Advent18.count_interior_cells()
     stacktrace:
       (advent18 0.1.0) lib/advent18.ex:210: anonymous fn/1 in Advent18.find_wall_indices/2
       (elixir 1.15.7) lib/enum.ex:1693: Enum."-map/2-lists^map/1-1-"/2
       (elixir 1.15.7) lib/enum.ex:1693: Enum."-map/2-lists^map/1-1-"/2
       (advent18 0.1.0) lib/advent18.ex:183: anonymous fn/4 in Advent18.count_interior_cells/1
       (elixir 1.15.7) lib/enum.ex:4379: Enum.reduce/3
       test/advent18_test.exs:34: (test)

...
Finished in 0.02 seconds (0.00s async, 0.02s sync)
3 doctests, 3 tests, 1 failure, 2 skipped

Randomized with seed 130269
